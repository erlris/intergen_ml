select(OLS, variables, ElasticNet, XGBoost, modelnumber)
res.tab$variables[which(train$variables == "Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")] <- "Extended"
res.tab$variables[which(test$variables == "Income with multiple functional forms")] <- "Income (flexible)"
res.tab$ElasticNet[which(train$variables == "Income with multiple functional forms")] <- NA
res.tab <- res %>% filter(variables %in% c("Rank-Rank",
"Income with multiple functional forms",
"Income & wealth",
"Income & education length",
"Income, wealth & education length",
"Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")) %>%
select(OLS, variables, ElasticNet, XGBoost, modelnumber)
res.tab$variables[which(train$variables == "Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")] <- "Extended"
res.tab$variables[which(test$variables == "Income with multiple functional forms")] <- "Income (flexible)"
res.tab$ElasticNet[which(train$variables == "Income with multiple functional forms")] <- NA
res.tab
train
test
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber)
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber) %>%
rename("Training R2 (mean)" = rsquared)
train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = mean(rsquared),
"Training R2 (sd)" = sd(rsquared))
train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4))
train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F)
train
train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
spread(key = Model)
?spread
train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
spread(key = Model, value = "Training R2 (mean)")
train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
spread(key = Model, value = c("Training R2 (mean)", `Training R2 (sd)`))
train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
select(- `Training R2 (sd)`) %>%
spread(key = Model, value = c("Training R2 (mean)"))
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
select(- `Training R2 (sd)`) %>%
spread(key = Model, value = c("Test R2"))
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Test R2" = round(mean(rsquared), digits = 3)) %>%
filter(is.na(`Test R2`) == F) %>%
spread(key = Model, value = c("Test R2"))
test.tbl
train.tbl <- train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
select(- `Training R2 (sd)`)
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Test R2" = round(mean(rsquared), digits = 3)) %>%
filter(is.na(`Test R2`) == F) %>%
spread(key = Model, value = c("Test R2"))
test <- res %>% filter(data == "Testing",
variables %in% c("Rank-Rank",
"Income with multiple functional forms",
"Income & wealth",
"Income & education length",
"Income, wealth & education length",
"Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")) %>%
select(OLS, variables, ElasticNet, XGBoost, modelnumber)
test$variables[which(test$variables == "Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")] <- "Extended"
test$variables[which(test$variables == "Income with multiple functional forms")] <- "Income (flexible)"
test$ElasticNet[which(test$variables == "Income with multiple functional forms")] <- NA
test %>%
gather(key="Model",value="rsquared", - variables, - modelnumber) %>%
ggplot(aes(x=reorder(str_wrap(variables,15), modelnumber),
y=rsquared,
fill=factor(Model,levels=c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom="col", position=position_dodge(),
color="black") +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x="Included Variables",y="R-Squared") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title.position = "top",title.hjust = 0.5))
ggsave(file="graphs/test_R2.pdf",
height=11,width=11)
### 2.2 Train
train <- res %>% filter(data == "Training Resamples",
variables %in% c("Rank-Rank",
"Income with multiple functional forms",
"Income & wealth",
"Income & education length",
"Income, wealth & education length",
"Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")) %>%
select(OLS, variables, ElasticNet, XGBoost, modelnumber)
train$variables[which(train$variables == "Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")] <- "Extended"
train$variables[which(train$variables == "Income with multiple functional forms")] <- "Income (flexible)"
train$ElasticNet[which(train$variables == "Income with multiple functional forms")] <- NA
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber) %>%
ggplot(aes(x = reorder( str_wrap(variables, 15), modelnumber),
y = rsquared,
fill = factor(Model, levels = c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom = "col",position=position_dodge(),
color = "black") +
stat_summary(fun.data = "mean_se",
fun.args = list(mult=2),
position = position_dodge(width=0.9),
geom = "errorbar",
aes(width=0.3)) +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x = "Included Variables", y = "R-Squared") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))
ggsave(file = "graphs/train_R2.pdf",
height = 11, width = 11)
### 2.3 Tables
train.tbl <- train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
select(- `Training R2 (sd)`)
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Test R2" = round(mean(rsquared), digits = 3)) %>%
filter(is.na(`Test R2`) == F) %>%
spread(key = Model, value = c("Test R2"))
test.tbl
train.tbl
test <- res %>% filter(data == "Testing",
variables %in% c("Rank-Rank",
"Income with multiple functional forms",
"Income & wealth",
"Income & education length",
"Income, wealth & education length",
"Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")) %>%
select(OLS, variables, ElasticNet, XGBoost, modelnumber)
test$variables[which(test$variables == "Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")] <- "Extended"
test$variables[which(test$variables == "Income with multiple functional forms")] <- "Income (flexible)"
test$ElasticNet[which(test$variables == "Income (flexible)")] <- NA
test %>%
gather(key="Model",value="rsquared", - variables, - modelnumber) %>%
ggplot(aes(x=reorder(str_wrap(variables,15), modelnumber),
y=rsquared,
fill=factor(Model,levels=c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom="col", position=position_dodge(),
color="black") +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x="Included Variables",y="R-Squared") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title.position = "top",title.hjust = 0.5))
ggsave(file="graphs/test_R2.pdf",
height=11,width=11)
### 2.2 Train
train <- res %>% filter(data == "Training Resamples",
variables %in% c("Rank-Rank",
"Income with multiple functional forms",
"Income & wealth",
"Income & education length",
"Income, wealth & education length",
"Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")) %>%
select(OLS, variables, ElasticNet, XGBoost, modelnumber)
train$variables[which(train$variables == "Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")] <- "Extended"
train$variables[which(train$variables == "Income with multiple functional forms")] <- "Income (flexible)"
train$ElasticNet[which(train$variables == "Income (flexible)")] <- NA
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber) %>%
ggplot(aes(x = reorder( str_wrap(variables, 15), modelnumber),
y = rsquared,
fill = factor(Model, levels = c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom = "col",position=position_dodge(),
color = "black") +
stat_summary(fun.data = "mean_se",
fun.args = list(mult=2),
position = position_dodge(width=0.9),
geom = "errorbar",
aes(width=0.3)) +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x = "Included Variables", y = "R-Squared") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))
ggsave(file = "graphs/train_R2.pdf",
height = 11, width = 11)
### 2.3 Tables
train.tbl <- train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
select(- `Training R2 (sd)`)
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Test R2" = round(mean(rsquared), digits = 3)) %>%
filter(is.na(`Test R2`) == F) %>%
spread(key = Model, value = c("Test R2"))
test.tbl
train.tbl <- train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F)
train.tbl
train.tbl <- train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
mutate(completeness = `Training R2 (mean)`/0.0490)
train.tbl
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Test R2" = round(mean(rsquared), digits = 3)) %>%
filter(is.na(`Test R2`) == F)
test.tbl
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Test R2" = round(mean(rsquared), digits = 3)) %>%
filter(is.na(`Test R2`) == F) %>%
mutate(completeness = `Training R2 (mean)`/0.0480)
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Test R2" = round(mean(rsquared), digits = 3)) %>%
filter(is.na(`Test R2`) == F) %>%
mutate(completeness = `Test R2`/0.0480)
test.tbl
train.tbl
### 3. Maps ------
res.reg
hist(res.reg$earn_sd)
res.reg.scatter <- res.reg %>% mutate(completeness = rsquared_rank/ rsquared_full) %>%
select(region, observations, earn_sd, edu_sd, wealth_sd, earn_edu_cor, earn_wealth_cor,
rsquared_rank, rsquared_full, completeness)
res.reg.scatter
plotdata <- res.reg.scatter %>%
ggplot(aes(x = rsquared_rank, y = rsquared_full))
plotdata
res.reg.scatter
plotdata <- res.reg.scatter %>%
ggplot(aes(x = rsquared_rank, y = rsquared_full)) +
geom_point()
plotdata
plotdata <- res.reg.scatter %>%
ggplot(aes(x = rsquared_rank, y = rsquared_full)) +
geom_point(size = observation)
plotdata
plotdata <- res.reg.scatter %>%
ggplot(aes(x = rsquared_rank, y = rsquared_full)) +
geom_point(size = observations)
plotdata
plotdata <- res.reg.scatter %>%
ggplot(aes(x = rsquared_rank, y = rsquared_full, size = observations)) +
geom_point()
plotdata
plotdata <- res.reg.scatter %>%
ggplot(aes(x = rsquared_rank, y = rsquared_full, size = observations)) +
geom_point() + xlab("R2 from rank-rank regression") +
ylab("R2 from full model")
plotdata
plotdata <- res.reg.scatter %>%
ggplot(aes(x = rsquared_rank, y = rsquared_full, size = observations)) +
geom_point() + xlab("rank-rank R2") +
ylab("Full model R2")
plotdata
plotdata <- res.reg.scatter %>%
ggplot(aes(x = rsquared_rank, y = rsquared_full, size = observations)) +
geom_point() + xlab("rank-rank R2") +
ylab("Full model R2")
plotdata
plotdata <- res.reg.scatter %>%
ggplot(aes(x = rsquared_rank, y = rsquared_full, size = observations)) +
geom_point() + xlab("rank-rank R2") +
ylab("Full model R2") +
theme(base_size = 22)
plotdata
plotdata <- res.reg.scatter %>%
ggplot(aes(x = rsquared_rank, y = rsquared_full, size = observations)) +
geom_point() + xlab("rank-rank R2") +
ylab("Full model R2") +
theme_grey(base_size = 22)
plotdata
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber) %>%
ggplot(aes(x = reorder( str_wrap(variables, 15), modelnumber),
y = rsquared,
fill = factor(Model, levels = c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom = "col",position=position_dodge(),
color = "black") +
stat_summary(fun.data = "mean_se",
fun.args = list(mult=2),
position = position_dodge(width=0.9),
geom = "errorbar",
aes(width=0.3)) +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x = "Included Variables", y = "R-Squared") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))   +
theme_grey(base_size = 22)
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber) %>%
ggplot(aes(x = reorder( str_wrap(variables, 15), modelnumber),
y = rsquared,
fill = factor(Model, levels = c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom = "col",position=position_dodge(),
color = "black") +
stat_summary(fun.data = "mean_se",
fun.args = list(mult=2),
position = position_dodge(width=0.9),
geom = "errorbar",
aes(width=0.3)) +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x = "Included Variables", y = "R-Squared") +
theme(legend.position = "bottom")  +
theme_grey(base_size = 22 +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5)) )
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber) %>%
ggplot(aes(x = reorder( str_wrap(variables, 15), modelnumber),
y = rsquared,
fill = factor(Model, levels = c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom = "col",position=position_dodge(),
color = "black") +
stat_summary(fun.data = "mean_se",
fun.args = list(mult=2),
position = position_dodge(width=0.9),
geom = "errorbar",
aes(width=0.3)) +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x = "Included Variables", y = "R-Squared") +
theme(legend.position = "bottom")  +
theme_grey(base_size = 22) +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber) %>%
ggplot(aes(x = reorder( str_wrap(variables, 15), modelnumber),
y = rsquared,
fill = factor(Model, levels = c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom = "col",position=position_dodge(),
color = "black") +
stat_summary(fun.data = "mean_se",
fun.args = list(mult=2),
position = position_dodge(width=0.9),
geom = "errorbar",
aes(width=0.3)) +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x = "Included Variables", y = "R-Squared") +
theme(legend.position = "bottom",
base_size = 22) +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber) %>%
ggplot(aes(x = reorder( str_wrap(variables, 15), modelnumber),
y = rsquared,
fill = factor(Model, levels = c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom = "col",position=position_dodge(),
color = "black") +
stat_summary(fun.data = "mean_se",
fun.args = list(mult=2),
position = position_dodge(width=0.9),
geom = "errorbar",
aes(width=0.3)) +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x = "Included Variables", y = "R-Squared") +
theme_grey(legend.position = "bottom",
base_size = 22) +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber) %>%
ggplot(aes(x = reorder( str_wrap(variables, 15), modelnumber),
y = rsquared,
fill = factor(Model, levels = c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom = "col",position=position_dodge(),
color = "black") +
stat_summary(fun.data = "mean_se",
fun.args = list(mult=2),
position = position_dodge(width=0.9),
geom = "errorbar",
aes(width=0.3)) +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x = "Included Variables", y = "R-Squared") +
theme_grey(base_size = 22) +
theme(legend.position = "bottom",
base_size = 22) +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))
theme_set(theme_gray(base_size = 18))
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber) %>%
ggplot(aes(x = reorder( str_wrap(variables, 15), modelnumber),
y = rsquared,
fill = factor(Model, levels = c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom = "col",position=position_dodge(),
color = "black") +
stat_summary(fun.data = "mean_se",
fun.args = list(mult=2),
position = position_dodge(width=0.9),
geom = "errorbar",
aes(width=0.3)) +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x = "Included Variables", y = "R-Squared") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))
ggsave(file = "graphs/train_R2.pdf",
height = 11, width = 11)
plotdata <- res.reg.scatter %>%
ggplot(aes(x = rsquared_rank, y = rsquared_full, size = observations)) +
geom_point() + xlab("rank-rank R2") +
ylab("Full model R2")
plotdata
results %>%
filter(observations > 200) %>%
select(rsquared_ratio,earn_sd,edu_sd,wealth_sd,
earn_edu_cor,earn_wealth_cor) %>%
rename("Stanard Deviation of Earnings Percentile"=earn_sd,
"Standard Deviation of Education"=edu_sd,
"Standard Deviation of Wealth Percentile"=wealth_sd,
"Correlation between Earnings Percentile and Education"=earn_edu_cor,
"Correlation between Earnings Percentile and Wealth Percentile"=earn_wealth_cor) %>%
gather(key=variable,value=value,-rsquared_ratio) %>%
ggplot(aes(x=value,y=rsquared_ratio)) +
geom_point() +
geom_smooth(method="lm") +
labs(x="Value",y="Full R-Squared / Rank-Rank R-Squared") +
facet_wrap("variable",scales = "free_x")
res.reg.scatter %>%
filter(observations > 200) %>%
select(completeness, earn_sd,edu_sd, wealth_sd,
earn_edu_cor, earn_wealth_cor) %>%
rename("Standard Deviation of Earnings Percentile"=earn_sd,
"Standard Deviation of Education"=edu_sd,
"Standard Deviation of Wealth Percentile"=wealth_sd,
"Correlation between Earnings Percentile and Education"=earn_edu_cor,
"Correlation between Earnings Percentile and Wealth Percentile"=earn_wealth_cor) %>%
gather(key = variable, value = value, - completeness) %>%
ggplot(aes(x = value, y = completeness)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x="Value", y = "Completeness") +
facet_wrap("variable", scales = "free_x")
res.reg.scatter %>%
filter(observations > 200) %>%
select(completeness, earn_sd,edu_sd, wealth_sd,
earn_edu_cor, earn_wealth_cor) %>%
rename("Earnings sd" = earn_sd,
"Education sd" = edu_sd,
"Wealth sd" = wealth_sd,
"Earnings and Education corr" = earn_edu_cor,
"Earnings and Wealth corr" = earn_wealth_cor) %>%
gather(key = variable, value = value, - completeness) %>%
ggplot(aes(x = value, y = completeness)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x="Value", y = "Completeness") +
facet_wrap("variable", scales = "free_x")
ggsave(file = "graphs/completeness_dist.pdf",
height = 11, width = 11)
res.reg <- as_tibble(readRDS("data/regionresults.rds"))
res.reg
