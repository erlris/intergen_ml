soc.trans$SynSocial2001
soc.trans$Approximated.Social.Grade
soc.trans <- soc.trans %>%
filter(n>10, SynSocial2001 > 2 & Approximated.Social.Grade > 2)
soc.trans <- soc.trans %>%
mutate(source = as.character(SynSocial2001),
target = as.character(Approximated.Social.Grade)) %>%
mutate(Approximated.Social.Grade = Approximated.Social.Grade + 5)
soc.trans$Approximated.Social.Grade
p <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = c("A1", "A2", "B1", "B2"),
color = c("blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = soc.trans$SynSocial2001,
target = soc.trans$Approximated.Social.Grade,
value =  soc.trans$n
)
) %>%
layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
p
p <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = c("A1", "A2", "B1", "B2"),
color = c("blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = soc.trans$SynSocial2001,
target = soc.trans$Approximated.Social.Grade,
value =  soc.trans$n
)
) %>%
layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
p
soc.trans <- soc.trans %>%
filter(n>10, SynSocial2001 > 2 & Approximated.Social.Grade > 2)
soc.trans <- soc.trans %>%
mutate(source = as.character(SynSocial2001),
target = as.character(Approximated.Social.Grade)) %>%
mutate(SynSocial2001 = SynSocial2001 - 2,
Approximated.Social.Grade = Approximated.Social.Grade -1)
p <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = c("A1", "A2", "B1", "B2"),
color = c("blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = soc.trans$SynSocial2001,
target = soc.trans$Approximated.Social.Grade,
value =  soc.trans$n
)
) %>%
layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
p
soc.trans <- soc.trans %>%
filter(n>10, SynSocial2001 > 2 & Approximated.Social.Grade > 2)
soc.trans <- soc.trans %>%
mutate(source = as.character(SynSocial2001),
target = as.character(Approximated.Social.Grade)) %>%
mutate(SynSocial2001 = SynSocial2001 - 2,
Approximated.Social.Grade = Approximated.Social.Grade -1)
soc.trans$SynSocial2001
soc.trans$Approximated.Social.Grade
soc.trans <- soc.trans %>%
filter(n>10, SynSocial2001 > 2 & Approximated.Social.Grade > 2)
soc.trans <- soc.trans %>%
mutate(source = as.character(SynSocial2001),
target = as.character(Approximated.Social.Grade)) %>%
mutate(SynSocial2001 = SynSocial2001 - 2,
Approximated.Social.Grade = Approximated.Social.Grade -1)
soc.trans <- soc.trans %>%
mutate(SynSocial2001 = SynSocial2001 - 2,
Approximated.Social.Grade = Approximated.Social.Grade -1)
ximated.Social.Grade))
soc.trans <- soc.trans %>%
mutate(SynSocial2001 = SynSocial2001 - 2,
Approximated.Social.Grade = Approximated.Social.Grade - 1)
soc.trans <- soc.trans %>%
mutate(soc2001 = SynSocial2001 - 2,
soc2011 = Approximated.Social.Grade - 1)
p <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = c("A1", "A2", "B1", "B2"),
color = c("blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = soc.trans$soc2001,
target = soc.trans$soc2011,
value =  soc.trans$n
)
) %>%
layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
p
soc.trans$soc2001
soc.trans$soc2011
soc.trans <- soc.trans %>%
filter(n>10, SynSocial2001 > 2 & Approximated.Social.Grade > 2)
soc.trans <- soc.trans %>%
mutate(source = as.character(SynSocial2001),
target = as.character(Approximated.Social.Grade))
soc.trans <- soc.trans %>%
mutate(soc2001 = SynSocial2001 - 2,
soc2011 = Approximated.Social.Grade - 1)
soc.trans$soc2001
soc.trans$soc2011
soc.trans <- soc.trans %>%
filter(n>10, SynSocial2001 > 2 & Approximated.Social.Grade > 2)
soc.trans <- data %>%
group_by(SynSocial2001,Approximated.Social.Grade) %>%
summarise(n = n())
# Filter out very low counts
soc.trans <- soc.trans %>%
filter(n>10, SynSocial2001 > 2 & Approximated.Social.Grade > 2)
soc.trans <- soc.trans %>%
mutate(source = as.character(SynSocial2001),
target = as.character(Approximated.Social.Grade))
soc.trans <- soc.trans %>%
mutate(soc2001 = SynSocial2001 - 2,
soc2011 = Approximated.Social.Grade - 1)
p <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = c("A1", "A2", "B1", "B2"),
color = c("blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = soc.trans$soc2001,
target = soc.trans$soc2011,
value =  soc.trans$n
)
) %>%
layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
p
soc.trans
soc.trans <- data %>%
group_by(SynSocial2001,Approximated.Social.Grade) %>%
summarise(n = n())
# Filter out very low counts
soc.trans <- soc.trans %>%
filter(n>10, SynSocial2001 > 2 & Approximated.Social.Grade > 2)
soc.trans <- soc.trans %>%
mutate(source = as.character(SynSocial2001),
target = as.character(Approximated.Social.Grade))
soc.trans <- soc.trans %>%
mutate(soc2001 = as.factor(SynSocial2001 - 2),
soc2011 = as.factor(Approximated.Social.Grade - 1))
p <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = c("A1", "A2", "B1", "B2"),
color = c("blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = soc.trans$soc2001,
target = soc.trans$soc2011,
value =  soc.trans$n
)
) %>%
layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
p
soc.trans <- data %>%
group_by(SynSocial2001,Approximated.Social.Grade) %>%
summarise(n = n())
# Filter out very low counts
soc.trans <- soc.trans %>%
filter(n>10, SynSocial2001 > 2 & Approximated.Social.Grade > 2)
soc.trans <- soc.trans %>%
mutate(source = as.character(SynSocial2001),
target = as.character(Approximated.Social.Grade))
soc.trans <- soc.trans %>%
mutate(soc2001 = as.integer(SynSocial2001 - 2),
soc2011 = as.integer(Approximated.Social.Grade - 1))
p <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = c("A1", "A2", "B1", "B2"),
color = c("blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = soc.trans$soc2001,
target = soc.trans$soc2011,
value =  soc.trans$n
)
) %>%
layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
p
soc.trans$soc2001
soc.trans$soc2011
p <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = node_list,
color = "blue",
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = dat$source_num,
target = dat$target_num,
value =  dat$value
)
) %>%
layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
p
node_list
dat$source_num
dat$target_num
1.96*((2/500)^0.5)*1349
1.96**((2/250)^0.5)*1349
2/250
sqrt(0.008)
1.96*((2/250)^0.5)*1349
### 0. Setup ------
rm(list = ls())
options("scipen"=100, "digits"=4)
set.seed(123)
setwd("/Users/jack/git_repos/intergen_ml") # Jack
# Load packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
# set default ggplot size
theme_set(theme_gray(base_size = 18))
### 1. Load results ------
res <- as_tibble(readRDS("data/modelresults.rds"))
res.reg <- as_tibble(readRDS("data/regionresults.rds"))
### 2. Completeness ------
### 2.1 Test
test <- res %>% filter(data == "Testing",
variables %in% c("Rank-Rank",
"Income with multiple functional forms",
"Income & wealth",
"Income & education length",
"Income, wealth & education length",
"Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")) %>%
select(OLS, variables, ElasticNet, XGBoost, modelnumber)
test$variables[which(test$variables == "Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")] <- "Extended"
test$variables[which(test$variables == "Income with multiple functional forms")] <- "Income (flexible)"
test$ElasticNet[which(test$variables == "Income (flexible)")] <- NA
test %>%
gather(key="Model",value="rsquared", - variables, - modelnumber) %>%
ggplot(aes(x=reorder(str_wrap(variables,15), modelnumber),
y=rsquared,
fill=factor(Model,levels=c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom="col", position=position_dodge(),
color="black") +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x="Included Variables",y="R-Squared") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title.position = "top",title.hjust = 0.5))
ggsave(file="graphs/test_R2.pdf",
height=11,width=11)
ggsave(file="graphs/test_R2.pdf",
height=09,width=11)
ggsave(file="graphs/test_R2.pdf",
height=08,width=11)
res <- as_tibble(readRDS("data/modelresults.rds"))
res.reg <- as_tibble(readRDS("data/regionresults.rds"))
names(res)
table(res$variables)
test <- res %>% filter(data == "Testing",
variables %in% c("Rank-Rank",
"Income with polynomials",
"Income & wealth",
"Income & education length",
"Income, wealth & education length",
"Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")) %>%
select(OLS, variables, ElasticNet, XGBoost, modelnumber)
test$variables[which(test$variables == "Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")] <- "Extended"
#test$variables[which(test$variables == "Income with multiple functional forms")] <- "Income (flexible)"
test$ElasticNet[which(test$variables == "Income (flexible)")] <- NA
test %>%
gather(key="Model",value="rsquared", - variables, - modelnumber) %>%
ggplot(aes(x=reorder(str_wrap(variables,15), modelnumber),
y=rsquared,
fill=factor(Model,levels=c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom="col", position=position_dodge(),
color="black") +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x="Included Variables",y="R-Squared") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title.position = "top",title.hjust = 0.5))
ggsave(file="graphs/test_R2.pdf",
height=08,width=11)
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Test R2" = round(mean(rsquared), digits = 3)) %>%
filter(is.na(`Test R2`) == F) %>%
mutate(completeness = `Test R2`/0.0480)
test.tbl
test <- res %>% filter(data == "Testing",
variables %in% c("Rank-Rank",
"Income with multiple functional forms",
"Income & wealth",
"Income & education length",
"Income, wealth & education length",
"Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")) %>%
select(OLS, variables, ElasticNet, XGBoost, modelnumber)
test$variables[which(test$variables == "Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")] <- "Extended"
test$variables[which(test$variables == "Income with multiple functional forms")] <- "Income (flexible)"
test$ElasticNet[which(test$variables == "Income (flexible)")] <- NA
test %>%
gather(key="Model",value="rsquared", - variables, - modelnumber) %>%
ggplot(aes(x=reorder(str_wrap(variables,15), modelnumber),
y=rsquared,
fill=factor(Model,levels=c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom="col", position=position_dodge(),
color="black") +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x="Included Variables",y="R-Squared") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title.position = "top",title.hjust = 0.5))
ggsave(file="graphs/test_R2.pdf",
height=08,width=11)
train <- res %>% filter(data == "Training Resamples",
variables %in% c("Rank-Rank",
"Income with multiple functional forms",
"Income & wealth",
"Income & education length",
"Income, wealth & education length",
"Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")) %>%
select(OLS, variables, ElasticNet, XGBoost, modelnumber)
train$variables[which(train$variables == "Income, wealth, education length and type, occupation, marital status, urban/rural, student activity, main income source & number of indivuduals in household")] <- "Extended"
train$variables[which(train$variables == "Income with multiple functional forms")] <- "Income (flexible)"
train$ElasticNet[which(train$variables == "Income (flexible)")] <- NA
train %>%
gather(key="Model", value="rsquared",- variables, - modelnumber) %>%
ggplot(aes(x = reorder( str_wrap(variables, 15), modelnumber),
y = rsquared,
fill = factor(Model, levels = c("OLS", "ElasticNet", "XGBoost"),
labels = c("OLS", "Elastic Net", "Gradient Boosted Trees")))) +
stat_summary(fun.y = "mean", geom = "col",position=position_dodge(),
color = "black") +
stat_summary(fun.data = "mean_se",
fun.args = list(mult=2),
position = position_dodge(width=0.9),
geom = "errorbar",
aes(width=0.3)) +
scale_fill_brewer(palette = "Blues",name="Estimator") +
labs(x = "Included Variables", y = "R-Squared") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))
ggsave(file = "graphs/train_R2.pdf",
height = 08, width = 11)
train.tbl <- train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
mutate(completeness = `Training R2 (mean)`/0.0490)
train.tbl
library(stargazer)
stargazer(train.tbl)
?stargazer
stargazer(train.tbl, summary = F)
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Test R2" = round(mean(rsquared), digits = 3)) %>%
filter(is.na(`Test R2`) == F) %>%
mutate(completeness = `Test R2`/0.0480)
stargazer(test.tbl, summary = F)
test$variables <- gsub(x = test$variables, pattern = "&", replacement = "and")
test$variables
test$variables <- gsub(x = test$variables, pattern = "&", replacement = "and")
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Test R2" = round(mean(rsquared), digits = 3)) %>%
filter(is.na(`Test R2`) == F) %>%
mutate(completeness = `Test R2`/0.0480)
stargazer(test.tbl, summary = F)
train$variables <- gsub(x = train$variables, pattern = "&", replacement = "and")
train.tbl <- train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
mutate(completeness = `Training R2 (mean)`/0.0490)
stargazer(train.tbl, summary = F)
train$variables <- gsub(x = train$variables, pattern = "&", replacement = "and")
train.tbl <- train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
mutate(completeness = round(`Training R2 (mean)`/0.0490, digits = 1))
stargazer(train.tbl, summary = F)
train$variables <- gsub(x = train$variables, pattern = "&", replacement = "and")
train.tbl <- train %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Training R2 (mean)" = round(mean(rsquared), digits = 3),
"Training R2 (sd)" = round(sd(rsquared), digits = 4)) %>%
filter(is.na(`Training R2 (mean)`) == F) %>%
mutate(completeness = round(`Training R2 (mean)`/0.0490, digits = 2))
stargazer(train.tbl, summary = F)
test$variables <- gsub(x = test$variables, pattern = "&", replacement = "and")
test.tbl <- test %>%
gather(key = "Model", value = "rsquared",- variables, - modelnumber) %>%
group_by(variables, Model) %>%
summarize("Test R2" = round(mean(rsquared), digits = 3)) %>%
filter(is.na(`Test R2`) == F) %>%
mutate(completeness = round(`Test R2`/0.0480, digits = 2))
stargazer(test.tbl, summary = F)
